#! /bin/python3
import json
from os import getcwd, listdir,system
from os.path import isfile,join,basename

from sys import argv


def isvalid(filename:str) -> bool:
    with open(filename,"r") as f:
        try:
            json.load(f)
            return True
        except:
            return False



class colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    

# if flags[0] is false dont check if json is valid
def test_folder(folder_path:str,*flags) -> str:
    output = ""
    check = True if len(flags) == 0 else flags[0]
    expect_to_pass = True if len(flags) < 2 else flags[1] 
    passed = True 
    test_files =[join(folder_path,x) for x in listdir(folder_path)
                 if ( isfile(join(folder_path,x)) )]
    heading = f"{colors.BOLD}{colors.UNDERLINE}Result of tests in:{colors.END} {folder_path}"
    
    count = 0
    for file in test_files:
        print(f"\n{colors.HEADER}testing {file} {colors.END}")
        if check and not isvalid(file):
            print(f"{colors.WARNING}\tis not valid json,skipping{colors.END}")
            continue;
        count += 1
        retval = system("./build/tests " + file)
        print(f"{colors.BOLD}\texited with signal {retval} {colors.END}")

        if expect_to_pass:
            if( retval != 0 ):
                output += f"{colors.FAIL}\t\t{basename(file)} failed   ✗{colors.END}\n"
            else:
                output += f"{colors.OKGREEN}\t\t{basename(file)} success! ✓{colors.END}\n"
        else:
            if( retval == 0 ):
                output += f"{colors.FAIL}\t\t{basename(file)} returned 0 but expected failure ✗{colors.END}\n"
            else:
                output += f"{colors.OKGREEN}\t\t{basename(file)} failed succesfully! ✓{colors.END}\n"
                      

        passed = passed and ( retval == 0)

    if (passed):
        output = f"{colors.OKGREEN}\t\tpassed {count}/{count} tests! ✓{colors.END}\n"

    return heading +"\n"+ output

def test_leaks(folder_path:str) -> str:
    output = ""
    passed = True 
    test_files =[join(folder_path,x) for x in listdir(folder_path)
                 if ( isfile(join(folder_path,x)) )]
    heading = f"{colors.BOLD}{colors.UNDERLINE}Leaks in: {colors.END} {folder_path}"
    
    count = 0
    for file in test_files:
        print(f"\n{colors.HEADER}testing {file} {colors.END}")
        retval = system("valgrind --error-exitcode=10 ./build/tests "+ file)

        if( retval == 10 ):
            output += f"{colors.FAIL}\t\t{basename(file)} Leaks found   ✗{colors.END}\n"
        else:
            output += f"{colors.OKGREEN}\t\t{basename(file)} 0 leaks! ✓{colors.END}\n"


    return heading +"\n"+ output




def main():
    test_locations = ["tests/list_tests","tests/str_tests","tests/object_tests","tests/fail_tests","tests/full_tests"]
    checks = [True,True,True,False,True]
    expected_to_pass  = [True,True,True,False,True]

    final_output = ""
    for location,check,expected in zip(test_locations,checks,expected_to_pass):
        final_output += "\n"
        final_output += test_folder(join(getcwd(),location),check,expected)

    final_output += f"\n{colors.HEADER}LEAK-CHECK{colors.END}"
    for location in test_locations:
        final_output += "\n"
        final_output += test_leaks(location)


    print(final_output)


if __name__ =="__main__":
    if len(argv) == 1:
        main()
    else:
        print(isvalid(argv[1]))


